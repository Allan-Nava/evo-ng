package ng

import (
	"bufio"
	"bytes"
	"fmt"
	"github.com/getevo/evo-ng/internal/file"
	"github.com/getevo/evo-ng/internal/proc"
	"github.com/moznion/gowrtr/generator"
	"os"
	"os/exec"
	"path/filepath"
)

var skeleton Skeleton

func Start()  {
	skeleton = GetSkeleton("./app.json")
	root := generator.NewRoot()
	var main = generator.NewFunc(
		nil,
		generator.NewFuncSignature("main"),
	)


	main = main.AddStatements(
		generator.NewComment("Register EVO"),
		generator.NewRawStatement(`evo.Engine()`),
		generator.NewNewline(),
	)
	if !file.IsFileExist(file.WorkingDir()+"/go.mod") {
		run("go", "mod", "init")
	}


	f, err := os.Open(file.WorkingDir()+"/go.mod")
	if err != nil {
		proc.Die("unable to open go.mod")
	}
	r := bufio.NewReader(f)
	line, _, err := r.ReadLine()
	if err != nil {
		panic(err)
	}
	module := string(bytes.TrimPrefix(line, []byte("module ")))

	var imports = []string{
		"github.com/getevo/evo-ng",
	}
	for _,include := range skeleton.Include{
		if include.Local != nil{
			var pkg = filepath.Base(*include.Local)
			main = main.AddStatements(
				generator.NewComment("Register "+*include.Local),
				generator.NewRawStatement(pkg+`.Register()`),
				generator.NewNewline(),
			)
			imports = append(imports,module+"/"+*include.Local)
		}
	}

	root = root.AddStatements(
		generator.NewPackage("main"),
		generator.NewComment("GENERATED BY EVO-NG"),
		generator.NewImport(imports...),
		generator.NewNewline(),
	).AddStatements(main).
		Gofmt("-s")

	generated, err := root.Generate(0)
	if err != nil {
		panic(err)
	}
	file.Write(file.WorkingDir()+"/main.go",generated)
	run("go","mod","tidy")
	Watcher()
}



func run(cmd string,args ...string)  {
	fmt.Println(cmd,args)
	c := exec.Command(cmd,args...)
	c.Dir = file.WorkingDir()
	c.Run()
}

