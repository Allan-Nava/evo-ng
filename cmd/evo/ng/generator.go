package ng

import (
	"bufio"
	"bytes"
	"fmt"
	"github.com/getevo/evo-ng"
	"github.com/getevo/evo-ng/internal/file"
	"github.com/getevo/evo-ng/internal/proc"
	"github.com/moznion/gowrtr/generator"
	"os"
	"os/exec"
	"strings"
)

var skeleton Skeleton

var main = Main{}
var ContextInterface = Function{
	Name: "Extend",
	Extend: Type{
		IsPtr: true,
	},
	Result: []Type{
		{Struct: "error"},
	},
}

var RegisterFunction = Function{
	Name: "Register",
}

func Start() {
	os.Remove("./go.mod")
	skeleton = GetSkeleton("./app.json")
	main.Root = generator.NewRoot()
	main.Main = generator.NewFunc(
		nil,
		generator.NewFuncSignature("main"),
	)

	main.Main = main.Main.AddStatements(
		generator.NewComment("Register EVO"),
		generator.NewRawStatement(`evo.Engine()`),
		generator.NewNewline(),
	)
	if !file.IsFileExist("./go.mod") {
		run("go", "mod", "init")
	}

	for src, dst := range skeleton.Replace {
		run("go", "mod", "edit", "-replace", src+"="+dst)
	}
	f, err := os.Open(file.WorkingDir() + "/go.mod")
	if err != nil {
		proc.Die("unable to open go.mod")
	}
	r := bufio.NewReader(f)
	line, _, err := r.ReadLine()
	if err != nil {
		panic(err)
	}
	skeleton.Module = string(bytes.TrimPrefix(line, []byte("module ")))

	skeleton.GenContext()

	var imports = []string{
		"github.com/getevo/evo-ng",
		skeleton.Module + "/http",
	}

	main.Main = main.Main.AddStatements(generator.NewRawStatement("evo.UseContext(&http.Context{})"))

	for _, include := range skeleton.Include {

		var pkg = skeleton.GetPackage(include)
		if pkg.HasFunction(RegisterFunction) {
			main.Main = main.Main.AddStatements(
				generator.NewComment("Register "+include),
				generator.NewRawStatement("evo.Register("+pkg.Name+`.Register)`),
				generator.NewNewline(),
			)
			if pkg.IsLocal {
				imports = append(imports, skeleton.Module+"/"+include)
			} else {
				imports = append(imports, strings.Split(include, "@")[0])
			}
		}

	}

	main.Main = main.Main.AddStatements(generator.NewRawStatement("evo.Run()"))

	main.Root = main.Root.AddStatements(
		generator.NewPackage("main"),
		generator.NewComment("GENERATED BY EVO-NG"),
		generator.NewImport(imports...),
		generator.NewNewline(),
	).AddStatements(main.Main)

	generated, err := main.Root.Generate(0)
	if err != nil {
		evo.Panic(err)
	}
	file.Write(file.WorkingDir()+"/main.go", generated)

	run("go", "mod", "vendor")

	Watcher()
}

func run(cmd string, args ...string) {
	fmt.Println(cmd, strings.Join(args, " "))
	c := exec.Command(cmd, args...)
	c.Dir = file.WorkingDir()
	c.Run()
}
